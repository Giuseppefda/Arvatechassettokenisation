{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11905\paperh16837\margl1133\margr1133\margb1133\margt1133
\deftab720
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/Giuseppefda/Arvatechassettokenisation.git"}}{\fldrslt 
\f0\fs22 \cf2 \up0 \nosupersub \ul \ulc2 https://github.com/Giuseppefda/Arvatechassettokenisation.git}}
\f0\fs22 \cf2 \up0 \nosupersub \ulnone \
\
ASSET TOKEN ERC 1155\
\
// SPDX-License-Identifier: MIT\
pragma solidity ^0.8.0;\
\
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";\
import "@openzeppelin/contracts/access/Ownable.sol";\
\
contract AssetToken is ERC1155, Ownable \{\
    uint256 public constant GOLD = 0;\
    uint256 public constant SILVER = 1;\
    uint256 public constant BRONZE = 2;\
\
    constructor() ERC1155("https://example.com/token/\{id\}.json") \{\
        _mint(msg.sender, GOLD, 10, "");\
        _mint(msg.sender, SILVER, 100, "");\
        _mint(msg.sender, BRONZE, 1000, "");\
    \}\
\
    function mint(address account, uint256 id, uint256 amount) public onlyOwner \{\
        _mint(account, id, amount, "");\
    \}\
\
    function burn(address account, uint256 id, uint256 amount) public \{\
        require(msg.sender == account || msg.sender == owner(), "caller is not account or owner");\
        _burn(account, id, amount);\
    \}\
\
    function uri(uint256 id) public view override returns (string memory) \{\
        return string(abi.encodePacked(super.uri(id), ".json"));\
    \}\
\}\
\
\
}